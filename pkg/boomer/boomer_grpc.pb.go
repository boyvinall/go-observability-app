// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: pkg/boomer/boomer.proto

package boomer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Boomer_Boom_FullMethodName = "/boomer.Boomer/Boom"
)

// BoomerClient is the client API for Boomer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoomerClient interface {
	Boom(ctx context.Context, in *BoomRequest, opts ...grpc.CallOption) (*BoomResponse, error)
}

type boomerClient struct {
	cc grpc.ClientConnInterface
}

func NewBoomerClient(cc grpc.ClientConnInterface) BoomerClient {
	return &boomerClient{cc}
}

func (c *boomerClient) Boom(ctx context.Context, in *BoomRequest, opts ...grpc.CallOption) (*BoomResponse, error) {
	out := new(BoomResponse)
	err := c.cc.Invoke(ctx, Boomer_Boom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoomerServer is the server API for Boomer service.
// All implementations must embed UnimplementedBoomerServer
// for forward compatibility
type BoomerServer interface {
	Boom(context.Context, *BoomRequest) (*BoomResponse, error)
	mustEmbedUnimplementedBoomerServer()
}

// UnimplementedBoomerServer must be embedded to have forward compatible implementations.
type UnimplementedBoomerServer struct {
}

func (UnimplementedBoomerServer) Boom(context.Context, *BoomRequest) (*BoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Boom not implemented")
}
func (UnimplementedBoomerServer) mustEmbedUnimplementedBoomerServer() {}

// UnsafeBoomerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoomerServer will
// result in compilation errors.
type UnsafeBoomerServer interface {
	mustEmbedUnimplementedBoomerServer()
}

func RegisterBoomerServer(s grpc.ServiceRegistrar, srv BoomerServer) {
	s.RegisterService(&Boomer_ServiceDesc, srv)
}

func _Boomer_Boom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoomerServer).Boom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boomer_Boom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoomerServer).Boom(ctx, req.(*BoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Boomer_ServiceDesc is the grpc.ServiceDesc for Boomer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Boomer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boomer.Boomer",
	HandlerType: (*BoomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Boom",
			Handler:    _Boomer_Boom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/boomer/boomer.proto",
}
